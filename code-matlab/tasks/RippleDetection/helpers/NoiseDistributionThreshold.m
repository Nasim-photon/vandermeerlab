function threshold = NoiseDistributionThreshold(cfg,TSD)
%NOISEDISTRIBUTIONTHRESHOLD Estimate threshold based on the SWR-band 
%envelope power distribution
% See method in:
%           Yu et al, 2017 - Distinct hippocampal-cortical memory 
%           representations for experiences associated with movement versus
%           immobility https://elifesciences.org/articles/27621
%
%   threshold = NOISEDISTRIBUTIONTHRESHOLD(cfg,TSD)
%
%   INPUTS
%       cfg - config struct with fields controlling function behaviour (see
%           CONFIG OPTIONS)
%       TSD - time-stamped data to be used for determining the threhsold.
%           In Yu et al, the TSD would be generated by taking a consensus SWR
%           power envelope and restricting the datapoints to exclude times when
%           the subject was moving.
%
%   OUTPUTS 
%       threshold - the recommended threshold for the input TSD
%
%   CONFIG OPTIONS
%       cfg.binSize = 0.01 (default)
%           The bin size used for binning the z-score values in TSD.data
%
%       cfg.showFig = 1 (default)
%           1 - Makes a figure similar to Figure 3-figure supplement 1 
%           0 - No figure is plotted
%
% aacarey, Elyot Jan 2017

cfg_def.binSize = 0.01;
cfg_def.showFig = 1;
cfg_def.verbose = 1;
mfun = mfilename;
cfg = ProcessConfig(cfg_def,cfg,mfun);

% Z-score the data
zScoreData = zscore(TSD.data);
binSize = cfg.binSize;

% approximate noise distribution...

% histogram envelope
counts = histcounts(zScoreData,min(zScoreData):binSize:max(zScoreData));

% max of counts is the mode; index is the location of the peak, and thus
% the midline of the mirrored noise distribution
[~,index] = max(counts);

% get the zscore at the mode; this is where we have to reflect the noise
% distribution
mode_zscore = min(zScoreData)+binSize*index-binSize/2;

% this is the constructed noise distribution
belowModeZScores = sort(zScoreData(zScoreData < mode_zscore));

% the detection threshold is the 99.99th percentile of the estimated noise
% distribution - this is the far right part of the noise distribution -
% find what this percentile corresponds to in SDs above the mean - this
% will be the threshold for getting SWRs in the original input TSD
threshold = mode_zscore + mode_zscore - belowModeZScores(round(length(belowModeZScores)/10000));

if cfg.verbose; fprintf('%s: Recommended threshold is %0.2f.\n',mfun,threshold); end

% Make the figure
if cfg.showFig
    
    figure;
    
    linewidth = 1;
    fontsize = 14;
    suptitle('SWR detection threshold determination')
    consensusSWRBandEnvelopePower = min(zScoreData):binSize:max(zScoreData)-binSize;
    noiseCounts = [counts(1:index) fliplr(counts(1:index-1))];
    noiseEstimate = consensusSWRBandEnvelopePower(1:2*index-1);
    xlims = [-2 3];
    
    for iPlot = 1:2
        if iPlot == 2
            counts = log10(counts);
            noiseCounts = log10(noiseCounts);
            xlims = [consensusSWRBandEnvelopePower(1)-5 consensusSWRBandEnvelopePower(end)];
        end
        
        subplot(1,2,iPlot)
        
        plot(consensusSWRBandEnvelopePower,counts,'k','LineWidth',linewidth); hold on
        plot(noiseEstimate,noiseCounts,'g','LineWidth',linewidth)
        plot([consensusSWRBandEnvelopePower(index) consensusSWRBandEnvelopePower(index)],get(gca,'YLim'),'Color',[0.5 0.5 0.5],'LineWidth',linewidth)
        plot([threshold threshold],get(gca,'YLim'),'r--','LineWidth',linewidth)
        ylabel('Count','FontSize',fontsize)
        xlabel('Consensus SWR-band envelope power (z)','FontSize',fontsize)
        set(gca,'XLim',xlims)
        if iPlot == 2
           legend('Data','Noise estimate','Mode','Detection threshold','Location','northeast')
        end        
    end
end

